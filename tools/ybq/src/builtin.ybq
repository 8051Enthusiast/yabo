def error(msg): msg|error;
def map(f): [.[] | f];
def select(f): if f then . else empty end;
def add: reduce .[] as $x (null; . + $x);
def abs: if . < 0 then - . else . end;
def recurse(f): def r: ., (f | r); r;
def recurse(f; cond): def r: ., (f | select(cond) | r); r;
def recurse: recurse(.[]?);

# generic iterator/generator
def while(cond; update):
     def _while:
         if cond then ., (update | _while) else empty end;
     _while;
def until(cond; next):
     def _until:
         if cond then . else (next|_until) end;
     _until;


# range/3, with a `by` expression argument
def range($init; $upto; $by):
    if $by > 0 then $init|while(. < $upto; . + $by)
  elif $by < 0 then $init|while(. > $upto; . + $by)
  else empty end;
def range($x; $y): range($x; $y; 1);
def range($x): range(0; $x; 1);

def arrays: select(type == "array");
def objects: select(type == "object");
def booleans: select(type == "boolean");
def numbers: select(type == "number");
def strings: select(type == "string");
def nulls: select(. == null);
def values: select(. != null);
def scalars: select(type|. != "array" and . != "object");
def _flatten($x): reduce .[] as $i ([]; if $i | type == "array" and $x != 0 then . + ($i | _flatten($x-1)) else . + [$i] end);
def flatten($x): if $x < 0 then error("flatten depth must not be negative") else _flatten($x) end;
def flatten: _flatten(-1);

def to_entries: [keys_unsorted[] as $k | {key: $k, value: .[$k]}];
def reverse: [.[length - 1 - range(0; length)]];

def first(g): label $out | g | ., break $out;
def isempty(g): first((g|false), true);
def all(generator; condition): isempty(generator|condition and empty);
def any(generator; condition): isempty(generator|condition or empty)|not;
def all(generator): all(generator; .);
def any(generator): any(generator; .);
def last(g): reduce g as $item (null; $item);
def first: .[0];
def last: .[-1];
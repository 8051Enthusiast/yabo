=============
Simple Parser
=============

def [u8] *> complex = {
  real: f32_el
  imag: f32_el
}

---

(source_file
  (parser_definition
    from: (type_array
      expr: (parserdef_ref
        name: (identifier)))
    name: (identifier)
    to: (parser_block
      (block_open)
      content: (parser_sequence
        (parse_statement
	       name: (identifier)
	       parser: (identifier))
        (parse_statement
	       name: (identifier)
	       parser: (identifier)))
      (block_close))))

=============
Choice Parser
=============

def [u8] *> choice = {
  | if ascii
    return: utf8char
  | return: utf8char
}

---

(source_file
  (parser_definition
    from: (type_array
      expr: (parserdef_ref
        name: (identifier)))
    name: (identifier)
    to: (parser_block
      (block_open)
      content: (parser_sequence
        (parser_choice
          content: (parser_sequence
            (parse_statement
              parser: (unary_expression
                right: (identifier)))
            (parse_statement
              name: (retvrn)
              parser: (identifier))))
        (parser_choice
          content: (parser_sequence
            (parse_statement
                name: (retvrn)
                parser: (identifier)))))
        (block_close))))


=============
Let Statement
=============

def [u8] *> seven = {
  val: u8
  let return: u8 = 7
}

---

(source_file
  (parser_definition
    from: (type_array
      expr: (parserdef_ref
        name: (identifier)))
    name: (identifier)
    to: (parser_block
      (block_open)
      content: (parser_sequence
        (parse_statement
  	      name: (identifier)
        	parser: (identifier))
        (let_statement
        	name: (retvrn)
        	ty: (parserdef_ref
            name: (identifier))
        	expr: (number_literal)))
      (block_close))))

=============
Nested Blocks
=============

def [u8] *> nested = {
  val: ~
  return: {
    | val: if 0
    | let val: u8 = 3
      ~
    let return: u8 = val
  }
}

---

(source_file
  (parser_definition
    (type_array
      (parserdef_ref
        (identifier)))
    (identifier)
    (parser_block
      (block_open)
      (parser_sequence
        (parse_statement
          (identifier)
          (single))
        (parse_statement
          (retvrn)
          (parser_block
            (block_open)
            (parser_sequence
              (parser_choice
                (parser_sequence
                  (parse_statement
                    (identifier)
                    (unary_expression
                      (number_literal)))))
              (parser_choice
                (parser_sequence
                  (let_statement
                    (identifier)
                    (parserdef_ref
                      (identifier))
                    (number_literal))
                    (parse_statement
                      (single))))
              (let_statement
                (retvrn)
                (parserdef_ref
                  (identifier))
                (identifier)))
              (block_close))))
        (block_close))))

=============
Three Choices
=============

def [u8] *> three = {
  | if 0
    return: u8
  | if 1
    return: u8
  | return: u8
}

---
(source_file
  (parser_definition
    (type_array
      (parserdef_ref
        (identifier)))
    (identifier)
    (parser_block
      (block_open)
      (parser_sequence
        (parser_choice
          (parser_sequence
            (parse_statement
              (unary_expression
                (number_literal)))
            (parse_statement
              (retvrn)
              (identifier))))
        (parser_choice
          (parser_sequence
            (parse_statement
              (unary_expression
                (number_literal)))
            (parse_statement
              (retvrn)
              (identifier))))
        (parser_choice
          (parser_sequence
            (parse_statement
              (retvrn)
              (identifier)))))
        (block_close))))


=======
Comment
=======

# comment
def [u8] *> test = {
   # comment
  x: u8?
 # comment
}

---

(source_file
  (comment)
  (parser_definition
    (type_array
      (parserdef_ref
        (identifier)))
    (identifier)
    (parser_block
      (block_open)
      (comment)
      (parser_sequence
        (parse_statement
          (identifier)
          (bt_mark
            (identifier))))
      (comment)
      (block_close))))


====
Args
====

def *nonsense(x: int, y: int) = 1 + nonsense(3, 4)

---

(source_file
  (parser_definition
    from: (byte_slice)
    name: (identifier)
    argdefs: (arg_def_list
      args: (arg_definition
        name: (identifier)
        ty: (primitive_type))
      args: (arg_definition
        name: (identifier)
        ty: (primitive_type)))
    to: (binary_expression
      left: (number_literal)
      right: (fun_application
        applicant: (identifier)
        args: (number_literal)
        args: (number_literal)))))

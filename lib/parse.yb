# Parses a specific byte or fails
def *byteval(x: int) = {
  y: ~
  assert(x == y)?
}

# backtracks if `f` matches, otherwise parses
# a zero length value
fun ['t] *> not_if(f: ['t] *> 'r) = {
  # check if `f` parses
  | f?
  # if not, parse a zero-length unit type
  # and put it into the `not_parsed` field
  | not_parsed: +
} if not_parsed

# checks if `f` matches, but does not advance the
# stream and does not return the value of `f`
fun ['t] *> lookahead(f: ['t] *> 'r) = not_if(not_if(f))?

# succeeds if the current position is at the end of the stream
fun ['t] *> eof = not_if(~ if !eof)?

# optionally parses `f`, or zero length if `f` fails
fun ['t] *> optional(f: ['t] *> 'r) = {
  | some: f?
  | none: +
}

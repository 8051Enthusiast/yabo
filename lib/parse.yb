# Parses a specific byte or fails
def ~byteval(x: int) = {{
  y: ~
  assert(x == y)?
}}

# backtracks if `f` matches, otherwise parses
# a zero length value
fun [T] ~> not_if[T, R](f: [T] ~> R) = {
  {
    # check if `f` parses
    | f?
    # if not, parse a zero-length unit type
    # and put it into the `not_parsed` field
    \ not_parsed: {}
  } is not_parsed
}

# checks if `f` matches, but does not advance the
# stream and does not return the value of `f`
fun [T] ~> lookahead[T, R](f: [T] ~> R) = not_if(not_if(f))?

# succeeds if the current position is at the end of the stream
fun [T] ~> eof[T] = not_if(~ is !eof)?

# optionally parses `f`, or zero length if `f` fails
fun [T] ~> optional[T, R](f: [T] ~> R) = {
  | some: f?
  \ none: {}
}

fun [T] ~> _len_impl[T](acc: int): int = {
  | ~ is !eof, return: _len_impl(acc + 1)
  \ let return = acc
}

# gets the length of the rest of the stream
fun [T] ~> len[T] = _len_impl(0)

# Some parser combinators that parse the input using some given parsers,
# and then apply a function to the results.
fun [T] ~> lift[T, R, A](f: (A) -> R, a: [T] ~> A) = {
  res: a?, let return = f?(res)
}

fun [T] ~> lift2[T, R, A0, A1](f: (A0, A1) -> R, a0: [T] ~> A0, a1: [T] ~> A1) = {
  res0: a0?, res1: a1?, let return = f?(res0, res1)
}

fun [T] ~> lift3[T, R, A0, A1, A2](f: (A0, A1, A2) -> R, a0: [T] ~> A0, a1: [T] ~> A1, a2: [T] ~> A2) = {
  res0: a0?, res1: a1?, res2: a2?, let return = f?(res0, res1, res2)
}

fun [T] ~> lift4[T, R, A0, A1, A2, A3](f: (A0, A1, A2, A3) -> R, a0: [T] ~> A0, a1: [T] ~> A1, a2: [T] ~> A2, a3: [T] ~> A3) = {
  res0: a0?, res1: a1?, res2: a2?, res3: a3?, let return = f?(res0, res1, res2, res3)
}
# Backtracks if the argument is false.
fun ['t] *> assert(big: bit) = {
  let _ = big if true
}

# Fails if the argument is false.
# Useful for writing if-statement-like expressions.
# Example:
# ```
# fun fib(n: int) = when?(n < 2) then n else (fib(n - 1) + fib(n - 2))
# ```
fun when(big: bit) = big if true

# =============== inttypes ===============

# Parses an 8-bit unsigned integer.
fun *u8 = ~

# Parses an 8-bit little endian unsigned integer.
def *u8l = ~

# Parses an 8-bit big endian unsigned integer.
def *u8b = ~

# Parses an 8-bit little endian signed integer.
def *i8l = {
  x: ~
  | let return = x if 0x00..0x7f
  | let return = x - 0x100
}

# Parses an 8-bit big endian signed integer.
def *i8b = {
  x: ~
  | let return = x if 0x00..0x7f
  | let return = x - 0x100
}

# Parses a 16-bit little endian unsigned integer.
def *u16l = {
  lo: ~
  hi: ~
  let return = lo | hi << 8
}

# Parses a 16-bit big endian unsigned integer.
def *u16b = {
  hi: ~
  lo: ~
  let return = lo | hi << 8
}

# Parses a 16-bit little endian signed integer.
def *i16l = {
  lo: ~
  hi: i8l
  let return = lo | hi << 8
}

# Parses a 16-bit big endian signed integer.
def *i16b = {
  hi: i8b
  lo: ~
  let return = lo | hi << 8
}

# Parses a 32-bit little endian unsigned integer.
def *u32l = {
  lo: u16l
  hi: u16l
  let return = lo | hi << 16
}

# Parses a 32-bit big endian unsigned integer.
def *u32b = {
  hi: u16b
  lo: u16b
  let return = lo | hi << 16
}

# Parses a 32-bit little endian signed integer.
def *i32l = {
  lo: u16l
  hi: i16l
  let return = lo | hi << 16
}

# Parses a 32-bit big endian signed integer.
def *i32b = {
  hi: i16b
  lo: u16b
  let return = lo | hi << 16
}

# Parses a 64-bit little endian signed integer.
def *i64l = {
  lo: u32l
  hi: i32l
  let return = lo | hi << 32
}

# Parses a 64-bit big endian signed integer.
def *i64b = {
  hi: i32b
  lo: u32b
  let return = lo | hi << 32
}

# =============== desugar ===============

fun ['a] *> compose(a: ['a] *> ['b], b: ['b] *> 'c) = {
  x: a?, let return = x *> b?
}

fun ['a] *> index(idx: int): 'a = {
  ~[idx if 0..0x7fffffffffffffff] if !eof
  return: ~ if !eof
}
# Backtracks if the argument is false.
fun [t] ~> assert[t](cond: bit) = {
  let _ = cond is true
}

# Fails if the argument is false.
# Useful for writing if-statement-like expressions.
# Example:
# ```
# fun fib(n: int) = if?(n < 2) then n else (fib(n - 1) + fib(n - 2))
# ```
fun if(cond: bit) = cond is true

# Same as {}
fun ~nil = {}

# Maps a function f over an array.
fun [T] ~> map[T, R](f: (T) -> R) = {x: ~, let return = f?(x)}[..]

# Tries to parse using the first parser, then the second if the first fails.
fun [T] ~> alt[T, R](a0: [T] ~> R, a1: [T] ~> R) = {
  | return: a0?
  \ return: a1?
}

# Tries to parse, trying each parser in order
fun [T] ~> alt3[T, R](a0: [T] ~> R, a1: [T] ~> R, a2: [T] ~> R) = {
  | return: a0?
  | return: a1?
  \ return: a2?
}

# Tries to parse, trying each parser in order
fun [T] ~> alt4[T, R](a0: [T] ~> R, a1: [T] ~> R, a2: [T] ~> R, a3: [T] ~> R) = {
  | return: a0?
  | return: a1?
  | return: a2?
  \ return: a3?
}

# Parser of zero length that simply returns the input.
fun [T] ~> pure[T, R](v: R) = {let return = v}

# Returns a range from start to end (end exclusive)
fun range(start: int, end: int) = start..<end

# =============== inttypes ===============

# Parses an 8-bit unsigned integer.
fun ~u8 = ~

# Parses an 8-bit little endian unsigned integer.
def ~u8l = ~

# Parses an 8-bit big endian unsigned integer.
def ~u8b = ~

# Parses an 8-bit little endian signed integer.
def ~i8l = {
  x: ~
  | let return = x is 0x00..0x7f
  \ let return = x - 0x100
}

# Parses an 8-bit big endian signed integer.
def ~i8b = {
  x: ~
  | let return = x is 0x00..0x7f
  \ let return = x - 0x100
}

# Parses a 16-bit little endian unsigned integer.
def ~u16l = {
  lo: ~
  hi: ~
  let return = lo | hi << 8
}

# Parses a 16-bit big endian unsigned integer.
def ~u16b = {
  hi: ~
  lo: ~
  let return = lo | hi << 8
}

# Parses a 16-bit little endian signed integer.
def ~i16l = {
  lo: ~
  hi: i8l
  let return = lo | hi << 8
}

# Parses a 16-bit big endian signed integer.
def ~i16b = {
  hi: i8b
  lo: ~
  let return = lo | hi << 8
}

# Parses a 32-bit little endian unsigned integer.
def ~u32l = {
  lo: u16l
  hi: u16l
  let return = lo | hi << 16
}

# Parses a 32-bit big endian unsigned integer.
def ~u32b = {
  hi: u16b
  lo: u16b
  let return = lo | hi << 16
}

# Parses a 32-bit little endian signed integer.
def ~i32l = {
  lo: u16l
  hi: i16l
  let return = lo | hi << 16
}

# Parses a 32-bit big endian signed integer.
def ~i32b = {
  hi: i16b
  lo: u16b
  let return = lo | hi << 16
}

# Parses a 64-bit little endian signed integer.
def ~i64l = {
  lo: u32l
  hi: i32l
  let return = lo | hi << 32
}

# Parses a 64-bit big endian signed integer.
def ~i64b = {
  hi: i32b
  lo: u32b
  let return = lo | hi << 32
}

# =============== desugar ===============

fun [A] ~> compose[A, B, C](a: [A] ~> [B], b: [B] ~> C) = {
  x: a?, let return = x ~> b?
}

fun [A] ~> index[A](idx: int): A = {
  [idx is 0..0x7fffffffffffffff] is !eof
  return: ~ is !eof
}

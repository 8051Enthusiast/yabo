=============
Simple Parser
=============

def for[u8] *> complex: {
  real: f32_el,
  imag: f32_el,
}

---

(source_file
  (parser_definition
    from: (parser_array
      expr: (identifier))
    name: (identifier)
    to: (parser_block
      content: (parser_sequence
        (parse_statement
	       name: (identifier)
	       parser: (identifier))
        (parse_statement
	       name: (identifier)
	       parser: (identifier))))))

=============
Choice Parser
=============

def for[u8] *> choice: {
    if ascii,
    return: utf8char,
  |
    return: utf8char,
}

---

(source_file
  (parser_definition
    from: (parser_array
      expr: (identifier))
    name: (identifier)
    to: (parser_block 
      content: (parser_choice
        left: (parser_sequence
	        (parse_statement
      	    parser: (unary_expression
             right: (identifier)))
      	  (parse_statement
      	    name: (identifier)
      	    parser: (identifier)))
	      right: (parser_sequence
          (parse_statement
      	    name: (identifier)
      	    parser: (identifier)))))))

=============
Let Statement
=============

def for[u8] *> seven: {
  val: u8,
  let return: u8 = 7,
}

---

(source_file
  (parser_definition
    from: (parser_array
      expr: (identifier))
    name: (identifier)
    to: (parser_block
      content: (parser_sequence
        (parse_statement
  	      name: (identifier)
        	parser: (identifier))
        (let_statement
        	name: (identifier)
        	ty: (identifier)
        	expr: (number_literal))))))


====[ source code ]====
def ~g(a: ~'a, b: ~'b) = {
  | a?, b?, a?
  \ b?, a?, a?
}
def ~square(n: int) = [n * n]
def ~poly_unify(n: int, m: int) = {
  | [2 * n * m - 1]
    [n * n]
    [m * m]
    ~
  \ square(n + m)
    poly_unify(0, 0)
}
def ~static_len(a: int) = {
  | [a], [a]
  \ [2 * a]
  [a & 43]
}
def ~dynamic = {
  x: ~, [x]
}
export def ~test = {
  let a: ~_ = {}
  let b: ~_ = ~
  let c: ~_ = { d, b, b }
  let d: ~_ = [10]
  let e: ~_ = g([10], ~)
  let h: ~_ = poly_unify(4, 3)
  let k: ~_ = static_len(31)
  let l: ~_ = g(dynamic, {})
}

====[ binary 1 ]====
00

====[ output 1 ]====
{
  "a": "parser(0)",
  "b": "parser(1)",
  "c": "parser(12)",
  "d": "parser(10)",
  "e": "parser(21)",
  "h": "parser(49)",
  "k": "parser(73)",
  "l": "parser"
}

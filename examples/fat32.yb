# fields of the FAT32 header
export
def *fat32_header = {
  jmp_boot: [3]
  oem_name: [8]
  byts_per_sec: u16l
  sec_per_clus: u8 
  let bytes_per_cluster = byts_per_sec * sec_per_clus
  rsvd_sec_cnt: u16l
  num_fats: u8
  root_ent_cnt: u16l try 0
  tot_sec16: u16l try 0
  media: u8
  fat_sz16: u16l try 0
  sec_per_trk: u16l
  num_heads: u16l
  hidd_sec: u32l
  tot_sec32: u32l
  fat_sz32: u32l
  ext_flags: u16l
  fs_ver: u16l
  root_clus: u32l
  fs_info: u16l
  bk_boot_sec: u16l
  [12]
  drv_num: u8
  ~
  boot_sig: u8
  vol_id: u32l
  vol_lab: [11]
  fil_sys_type: [8]
}

static header = fat32_header at 0

# defines an integer in a FAT entry that has the high 4 bits masked out
def *masked_fat_val = {
  val: u32l
  let return = val & 0x0FFFFFFF
}

# defines a FAT entry
def *fat_entry = {
  # if it is in the range 2 to 0x0FFFFFEF, it is a valid cluster
  # and points to the next cluster in the file
  | next: masked_fat_val if 2..0x0FFFFFEF
  | other: masked_fat_val
}

# defines a fat table of a given size
def *fat_table = fat_entry[header.fat_sz32 * header.byts_per_sec / u32l.sizeof]

static fat = fat_table at (header.byts_per_sec * header.rsvd_sec_cnt)

static blocks = {
  [header.byts_per_sec * header.rsvd_sec_cnt]
  fat_table[header.num_fats]
  let data_sec = header.tot_sec32 - (header.rsvd_sec_cnt + header.fat_sz32 * header.num_fats)
  let count_of_clusters = data_sec / header.sec_per_clus
  return: [header.bytes_per_cluster][count_of_clusters]
} at 0

fun parse_block(idx: int, data: *'t(int)) = blocks.[idx - 2] *> data(idx)

# defines a short entry in the directory
def *short_entry = {
  name: [8]
  ext: [3]
  attr: u8
  res: u8
  crt_time_tenth: u8
  crt_time: u16l
  crt_date: u16l
  lst_acc_date: u16l
  fst_clus_hi: u16l
  wrt_time: u16l
  wrt_date: u16l
  fst_clus_lo: u16l
  file_size: u32l
  let cluster = fst_clus_hi << 16 | fst_clus_lo
}

# defines a long entry in the directory
def *long_entry = {
  ord: u8
  name1: u16l[5]
  attr: u8 if 0x0F
  type: u8
  chksum: u8
  name2: u16l[6]
  fst_clus_lo: u16l
  name3: u16l[2]
}

# a single entry in the directory, either a long or short entry, or empty
def *dir_entry = [32] |> {
  | empty: u8 if 0 or 0xE5
  | long: long_entry?
  | short: short_entry
    | assert(short.name.[0] == 0x2E)?
      let hidden = 1
    | assert(short.attr & 0x10 != 0)?
      let subdir = parse_block(short.cluster, dir_entries)
    | let file = parse_block(short.cluster, file_entry)
}

# a chain of directory entries
def *dir_entries(idx: int) = entry(dir_entry[header.byts_per_sec / dir_entry.sizeof], idx)

# a chain of file entries
def *file_entry(idx: int) = entry([header.bytes_per_cluster], idx)

# takes a data type and returns a linked list of entries using the FAT
def *entry(data_type: *'t, idx: int) = {
  data: data_type
  | let next_idx = fat.[idx].?next
    let next = parse_block(next_idx, entry(data_type, ..))
  | +
}

export
def *fat32 = {let return = parse_block(header.root_clus, dir_entries)}
